const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function main() {
    console.log('üå± Iniciando seed do banco de dados...');

    // PRIMEIRO: Criar campus
    const campusUbajara = await prisma.campus.upsert({
        where: { name: 'Ubajara' },
        update: {},
        create: {
            name: 'Ubajara',
            city: 'Ubajara',
            active: true
        }
    });

    const campusTiangua = await prisma.campus.upsert({
        where: { name: 'Tiangu√°' },
        update: {},
        create: {
            name: 'Tiangu√°',
            city: 'Tiangu√°',
            active: true
        }
    });

    console.log('‚úÖ Campus criados:', [campusUbajara.name, campusTiangua.name]);

    // SEGUNDO: Criar minist√©rios
    const ministerioMultimidia = await prisma.ministry.upsert({
        where: { name: 'Minist√©rio Multim√≠dia' },
        update: {},
        create: {
            name: 'Minist√©rio Multim√≠dia',
            description: 'Respons√°vel pela transmiss√£o, grava√ß√£o e equipamentos audiovisuais',
            active: true
        }
    });

    const ministerioLouvor = await prisma.ministry.upsert({
        where: { name: 'Minist√©rio de Louvor' },
        update: {},
        create: {
            name: 'Minist√©rio de Louvor',
            description: 'Respons√°vel pela m√∫sica e adora√ß√£o nos cultos',
            active: true
        }
    });

    const voluntariado = await prisma.ministry.upsert({
        where: { name: 'Voluntariado Geral' },
        update: {},
        create: {
            name: 'Voluntariado Geral',
            description: 'Atividades gerais de apoio e suporte',
            active: true
        }
    });

    const ministerioInfantil = await prisma.ministry.upsert({
        where: { name: 'Minist√©rio Infantil' },
        update: {},
        create: {
            name: 'Minist√©rio Infantil',
            description: 'Trabalho com crian√ßas e adolescentes',
            active: true
        }
    });

    const ministerioSonorizacao = await prisma.ministry.upsert({
        where: { name: 'Sonoriza√ß√£o e Ilumina√ß√£o' },
        update: {},
        create: {
            name: 'Sonoriza√ß√£o e Ilumina√ß√£o',
            description: 'Respons√°vel por som e ilumina√ß√£o dos cultos e eventos',
            active: true
        }
    });

    console.log('‚úÖ Minist√©rios criados:', [
        ministerioMultimidia.name,
        ministerioLouvor.name,
        voluntariado.name,
        ministerioInfantil.name,
        ministerioSonorizacao.name
    ]);

    // NOVO: Criar grupos de fun√ß√µes e fun√ß√µes COM ASSOCIA√á√ÉO AOS MINIST√âRIOS
    console.log('üéØ Criando grupos de fun√ß√µes e fun√ß√µes...');

    // Criar grupo Voluntariado Geral
    const voluntariadoGeral = await prisma.functionGroup.upsert({
        where: { name: 'Voluntariado Geral' },
        update: { ministryId: voluntariado.id },
        create: {
            name: 'Voluntariado Geral',
            description: 'Fun√ß√µes gerais de apoio aos cultos e eventos',
            active: true,
            ministryId: voluntariado.id
        }
    });

    // Criar grupo Multim√≠dia
    const multimidia = await prisma.functionGroup.upsert({
        where: { name: 'Multim√≠dia' },
        update: { ministryId: ministerioMultimidia.id },
        create: {
            name: 'Multim√≠dia',
            description: 'Fun√ß√µes relacionadas √† produ√ß√£o audiovisual',
            active: true,
            ministryId: ministerioMultimidia.id
        }
    });

    // Criar grupo Minist√©rio de Louvor
    const grupoLouvor = await prisma.functionGroup.upsert({
        where: { name: 'Minist√©rio de Louvor' },
        update: { ministryId: ministerioLouvor.id },
        create: {
            name: 'Minist√©rio de Louvor',
            description: 'Fun√ß√µes relacionadas ao louvor e adora√ß√£o',
            active: true,
            ministryId: ministerioLouvor.id
        }
    });

    // Criar grupo Sonoriza√ß√£o e Ilumina√ß√£o
    const grupoSonorizacao = await prisma.functionGroup.upsert({
        where: { name: 'Sonoriza√ß√£o e Ilumina√ß√£o' },
        update: { ministryId: ministerioSonorizacao.id },
        create: {
            name: 'Sonoriza√ß√£o e Ilumina√ß√£o',
            description: 'Fun√ß√µes de som e ilumina√ß√£o',
            active: true,
            ministryId: ministerioSonorizacao.id
        }
    });

    // Criar grupo Kids
    const grupoKids = await prisma.functionGroup.upsert({
        where: { name: 'Kids' },
        update: { ministryId: ministerioInfantil.id },
        create: {
            name: 'Kids',
            description: 'Fun√ß√µes relacionadas ao minist√©rio infantil',
            active: true,
            ministryId: ministerioInfantil.id
        }
    });

    // Fun√ß√µes do Voluntariado Geral
    const voluntariadoFunctions = [
        { name: 'Estacionamento', icon: 'car', description: 'Organiza√ß√£o do estacionamento' },
        { name: 'Acolhimento', icon: 'heart', description: 'Recep√ß√£o e acolhimento dos visitantes' },
        { name: 'Audit√≥rio', icon: 'users', description: 'Organiza√ß√£o do audit√≥rio' },
        { name: 'D√≠zimos e Oferta', icon: 'dollar-sign', description: 'Coleta de d√≠zimos e ofertas' },
        { name: 'Comunh√£o', icon: 'coffee', description: 'Organiza√ß√£o da comunh√£o' },
        { name: 'Ceia', icon: 'utensils', description: 'Organiza√ß√£o da santa ceia' }
    ];

    for (const func of voluntariadoFunctions) {
        await prisma.function.upsert({
            where: { 
                name_groupId: { 
                    name: func.name, 
                    groupId: voluntariadoGeral.id 
                } 
            },
            update: {},
            create: {
                name: func.name,
                description: func.description,
                icon: func.icon,
                groupId: voluntariadoGeral.id,
                active: true
            }
        });
    }

    // Fun√ß√µes de Multim√≠dia
    const multimidiaFunctions = [
        { name: 'Stories', icon: 'instagram', description: 'Cria√ß√£o de stories para redes sociais' },
        { name: 'Proje√ß√£o', icon: 'projector', description: 'Opera√ß√£o do sistema de proje√ß√£o' },
        { name: 'Fotos', icon: 'camera', description: 'Fotografia dos eventos' },
        { name: 'Reels', icon: 'video', description: 'Cria√ß√£o de reels para redes sociais' },
        { name: 'Live', icon: 'radio', description: 'Transmiss√£o ao vivo' },
        { name: 'V√≠deo Live', icon: 'video', description: 'Produ√ß√£o de v√≠deo para transmiss√£o' }
    ];

    for (const func of multimidiaFunctions) {
        await prisma.function.upsert({
            where: {
                name_groupId: {
                    name: func.name,
                    groupId: multimidia.id
                }
            },
            update: {},
            create: {
                name: func.name,
                description: func.description,
                icon: func.icon,
                groupId: multimidia.id,
                active: true
            }
        });
    }

    // Fun√ß√£o do Minist√©rio de Louvor
    await prisma.function.upsert({
        where: {
            name_groupId: {
                name: 'Minist√©rio de Louvor',
                groupId: grupoLouvor.id
            }
        },
        update: {},
        create: {
            name: 'Minist√©rio de Louvor',
            description: 'Participa√ß√£o no minist√©rio de louvor',
            icon: 'radio',
            groupId: grupoLouvor.id,
            active: true
        }
    });

    // Fun√ß√µes de Sonoriza√ß√£o e Ilumina√ß√£o
    const sonorizacaoFunctions = [
        { name: 'Ilumina√ß√£o', icon: 'briefcase', description: 'Opera√ß√£o de ilumina√ß√£o dos cultos' },
        { name: 'Sonoriza√ß√£o', icon: 'radio', description: 'Opera√ß√£o de som dos cultos' }
    ];

    for (const func of sonorizacaoFunctions) {
        await prisma.function.upsert({
            where: {
                name_groupId: {
                    name: func.name,
                    groupId: grupoSonorizacao.id
                }
            },
            update: {},
            create: {
                name: func.name,
                description: func.description,
                icon: func.icon,
                groupId: grupoSonorizacao.id,
                active: true
            }
        });
    }

    // Fun√ß√£o Kids
    await prisma.function.upsert({
        where: {
            name_groupId: {
                name: 'Voluntariado Kids',
                groupId: grupoKids.id
            }
        },
        update: {},
        create: {
            name: 'Voluntariado Kids',
            description: 'Trabalho com crian√ßas no minist√©rio infantil',
            icon: 'users',
            groupId: grupoKids.id,
            active: true
        }
    });

    console.log('‚úÖ Grupos de fun√ß√µes e fun√ß√µes criados com sucesso!');

    // TERCEIRO: Criar usu√°rio administrador master (Mathaus)
    const masterAdminPassword = await bcrypt.hash('kenbuk-gerjih-dyKve9', 12);

    const masterAdmin = await prisma.user.upsert({
        where: { email: 'mathauscarvalho@gmail.com' },
        update: {},
        create: {
            name: 'Mathaus Carvalho',
            email: 'mathauscarvalho@gmail.com',
            password: masterAdminPassword,
            phone: '11999999999',
            role: 'ADMIN',
            status: 'ACTIVE',
            campusId: campusUbajara.id,
            ministryId: ministerioMultimidia.id // Admin master do minist√©rio de m√≠dia
        }
    });

    console.log('‚úÖ Administrador Master criado:', masterAdmin.email);

    // QUARTO: Criar administrador padr√£o (backup)
    const adminPassword = await bcrypt.hash('admin123', 12);

    const admin = await prisma.user.upsert({
        where: { email: 'admin@igreja.com' },
        update: {},
        create: {
            name: 'Administrador',
            email: 'admin@igreja.com',
            password: adminPassword,
            phone: '11888888888',
            role: 'ADMIN',
            status: 'ACTIVE',
            campusId: campusUbajara.id,
            ministryId: ministerioMidia.id // Admin do minist√©rio de m√≠dia
        }
    });

    console.log('‚úÖ Administrador padr√£o criado:', admin.email);

    // QUARTO: Criar alguns membros de exemplo com campus e minist√©rios
    const memberPassword = await bcrypt.hash('123456', 12);

    const members = await Promise.all([
        prisma.user.upsert({
            where: { email: 'joao@email.com' },
            update: {},
            create: {
                name: 'Jo√£o Silva',
                email: 'joao@email.com',
                password: memberPassword,
                phone: '11888888888',
                role: 'MEMBER',
                status: 'ACTIVE',
                campusId: campusUbajara.id,
                ministryId: ministerioLouvor.id
            }
        }),
        prisma.user.upsert({
            where: { email: 'maria@email.com' },
            update: {},
            create: {
                name: 'Maria Santos',
                email: 'maria@email.com',
                password: memberPassword,
                phone: '11777777777',
                role: 'MEMBER',
                status: 'ACTIVE',
                campusId: campusTiangua.id,
                ministryId: ministerioInfantil.id
            }
        }),
        prisma.user.upsert({
            where: { email: 'pedro@email.com' },
            update: {},
            create: {
                name: 'Pedro Oliveira',
                email: 'pedro@email.com',
                password: memberPassword,
                phone: '11666666666',
                role: 'MEMBER',
                status: 'PENDING',
                campusId: campusUbajara.id,
                ministryId: null // Membro pendente n√£o tem minist√©rio ainda
            }
        }),
        prisma.user.upsert({
            where: { email: 'ana@email.com' },
            update: {},
            create: {
                name: 'Ana Costa',
                email: 'ana@email.com',
                password: memberPassword,
                phone: '11555555555',
                role: 'MEMBER',
                status: 'ACTIVE',
                campusId: campusTiangua.id,
                ministryId: ministerioRecepcao.id
            }
        })
    ]);

    console.log('‚úÖ Membros criados:', members.length);

    // QUINTO: Criar uma escala de exemplo COM FUN√á√ïES
    const nextSunday = new Date();
    nextSunday.setDate(nextSunday.getDate() + (7 - nextSunday.getDay()));

    const schedule = await prisma.schedule.create({
        data: {
            title: 'Culto Dominical - Manh√£',
            description: 'Culto de adora√ß√£o dominical das 9h',
            date: nextSunday,
            time: '09:00',
            location: 'Igreja Central - Ubajara',
            members: {
                create: [
                    { userId: members[0].id }, // Jo√£o (Louvor)
                    { userId: admin.id }       // Admin (M√≠dia)
                ]
            }
        }
    });

    // NOVO: Associar fun√ß√µes aos membros da escala de exemplo
    const scheduleMemberJoao = await prisma.scheduleMember.findFirst({
        where: { 
            scheduleId: schedule.id, 
            userId: members[0].id 
        }
    });

    const scheduleMemberAdmin = await prisma.scheduleMember.findFirst({
        where: { 
            scheduleId: schedule.id, 
            userId: admin.id 
        }
    });

    // Buscar algumas fun√ß√µes para associar
    const funcaoAcolhimento = await prisma.function.findFirst({
        where: { name: 'Acolhimento' }
    });

    const funcaoProjecao = await prisma.function.findFirst({
        where: { name: 'Proje√ß√£o' }
    });

    const funcaoFotos = await prisma.function.findFirst({
        where: { name: 'Fotos' }
    });

    // Associar fun√ß√µes aos membros da escala
    if (scheduleMemberJoao && funcaoAcolhimento) {
        await prisma.scheduleMemberFunction.create({
            data: {
                scheduleMemberId: scheduleMemberJoao.id,
                functionId: funcaoAcolhimento.id
            }
        });
    }

    if (scheduleMemberAdmin && funcaoProjecao) {
        await prisma.scheduleMemberFunction.create({
            data: {
                scheduleMemberId: scheduleMemberAdmin.id,
                functionId: funcaoProjecao.id
            }
        });
    }

    if (scheduleMemberAdmin && funcaoFotos) {
        await prisma.scheduleMemberFunction.create({
            data: {
                scheduleMemberId: scheduleMemberAdmin.id,
                functionId: funcaoFotos.id
            }
        });
    }

    console.log('‚úÖ Escala criada com fun√ß√µes associadas:', schedule.title);

    console.log('üéâ Seed conclu√≠do com sucesso!');
    console.log('');
    console.log('üè´ Campus dispon√≠veis:');
    console.log('   - Ubajara');
    console.log('   - Tiangu√°');
    console.log('');
    console.log('‚õ™ Minist√©rios dispon√≠veis:');
    console.log('   - Minist√©rio de M√≠dia');
    console.log('   - Minist√©rio de Louvor');
    console.log('   - Voluntariado Geral');
    console.log('   - Minist√©rio Infantil');
    console.log('   - Minist√©rio de Recep√ß√£o');
    console.log('');
    console.log('üéØ Grupos de Fun√ß√µes criados:');
    console.log('   üìã Voluntariado Geral: Estacionamento, Acolhimento, Audit√≥rio, D√≠zimos e Oferta, Comunh√£o, Ceia');
    console.log('   üé• Multim√≠dia: Stories, Proje√ß√£o, Fotos, Reels, Live, V√≠deo Live');
    console.log('');
    console.log('üë§ Login dos administradores:');
    console.log('');
    console.log('üîë ADMIN MASTER (Mathaus):');
    console.log('   Email: mathauscarvalho@gmail.com');
    console.log('   Senha: kenbuk-gerjih-dyKve9');
    console.log('   Campus: Ubajara');
    console.log('   Minist√©rio: Minist√©rio de M√≠dia');
    console.log('');
    console.log('üîë Admin padr√£o (backup):');
    console.log('   Email: admin@igreja.com');
    console.log('   Senha: admin123');
    console.log('   Campus: Ubajara');
    console.log('   Minist√©rio: Minist√©rio de M√≠dia');
    console.log('');
    console.log('üë• Membros de exemplo:');
    console.log('   joao@email.com / 123456 (ATIVO - Ubajara - Louvor)');
    console.log('   maria@email.com / 123456 (ATIVO - Tiangu√° - Infantil)');
    console.log('   pedro@email.com / 123456 (PENDENTE - Ubajara - Sem minist√©rio)');
    console.log('   ana@email.com / 123456 (ATIVO - Tiangu√° - Recep√ß√£o)');
    console.log('');
    console.log('üìÖ Escala de exemplo criada:');
    console.log('   - Jo√£o Silva: Acolhimento');
    console.log('   - Administrador: Proje√ß√£o + Fotos');
}

main()
    .catch((e) => {
        console.error('‚ùå Erro no seed:', e);
        process.exit(1);
    })
    .finally(async () => {
        await prisma.$disconnect();
    });