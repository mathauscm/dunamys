generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

enum NotificationType {
  SCHEDULE_ASSIGNMENT
  SCHEDULE_UPDATE
  SCHEDULE_CANCELLATION
  SCHEDULE_REMINDER
  SCHEDULE_CONFIRMATION
  SCHEDULE_CONFIRMATION_REMINDER
  CUSTOM_NOTIFICATION
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
  EMAIL_WHATSAPP
  BOTH
}

enum NotificationStatus {
  SENT
  FAILED
  PENDING
}

enum ConfirmationStatus {
  PENDING
  CONFIRMED
  UNAVAILABLE
}

// NOVO MODEL: Ministério
model Ministry {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento: Um ministério pode ter vários usuários e grupos de funções
  users User[]
  functionGroups FunctionGroup[]

  @@map("ministries")
}

// Campus model
model Campus {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  city      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento: Um campus pode ter vários usuários
  users User[]

  @@map("campuses")
}

model User {
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  password         String
  phone            String
  role             UserRole @default(MEMBER)
  status           UserStatus @default(PENDING)
  campusId         Int?     // Referência ao campus
  ministryId       Int?     // NOVO CAMPO: Referência ao ministério
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastLogin        DateTime?

  // Relacionamentos
  campus           Campus?    @relation(fields: [campusId], references: [id], onDelete: SetNull)
  ministry         Ministry?  @relation(fields: [ministryId], references: [id], onDelete: SetNull) // NOVO RELACIONAMENTO
  schedules        ScheduleMember[]
  unavailabilities Unavailability[]
  notifications    Notification[]
  auditLogs        AuditLog[]
  functionGroupAdmins FunctionGroupAdmin[]

  @@map("users")
}

model Schedule {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  time        String
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  members       ScheduleMember[]
  notifications Notification[]

  @@map("schedules")
}

model ScheduleMember {
  id                 Int               @id @default(autoincrement())
  userId             Int
  scheduleId         Int
  confirmationStatus ConfirmationStatus @default(PENDING)
  confirmedAt        DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  
  // NOVO RELACIONAMENTO: Um membro na escala pode ter várias funções
  functions ScheduleMemberFunction[]

  @@unique([userId, scheduleId])
  @@map("schedule_members")
}

model Unavailability {
  id        Int      @id @default(autoincrement())
  userId    Int
  startDate DateTime
  endDate   DateTime
  reason    String?
  createdAt DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("unavailabilities")
}

model Notification {
  id         Int                 @id @default(autoincrement())
  userId     Int
  scheduleId Int?
  type       NotificationType
  channel    NotificationChannel
  status     NotificationStatus
  message    String?
  error      String?
  sentAt     DateTime            @default(now())

  // Relacionamentos
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedule Schedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  targetId    Int?
  userId      Int?
  description String
  createdAt   DateTime @default(now())

  // Relacionamentos
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// ============================================================================
// NOVOS MODELS PARA SISTEMA DE FUNÇÕES
// ============================================================================

// NOVO MODEL: Grupos de Funções
model FunctionGroup {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  ministryId  Int?     // Referência ao Ministério (nullable para compatibilidade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  ministry  Ministry? @relation(fields: [ministryId], references: [id], onDelete: Cascade)
  functions Function[]
  admins    FunctionGroupAdmin[]

  @@map("function_groups")
}

// NOVO MODEL: Funções/Serviços
model Function {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  icon          String?  // Nome do ícone (ex: "car", "mic", "camera")
  active        Boolean  @default(true)
  groupId       Int      // Referência ao grupo
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  group               FunctionGroup      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  scheduleMemberFunctions ScheduleMemberFunction[]

  @@unique([name, groupId]) // Nome único dentro do grupo
  @@map("functions")
}

// NOVO MODEL: Relacionamento entre Schedule Member e Function
model ScheduleMemberFunction {
  id               Int @id @default(autoincrement())
  scheduleMemberId Int
  functionId       Int

  // Relacionamentos
  scheduleMember ScheduleMember @relation(fields: [scheduleMemberId], references: [id], onDelete: Cascade)
  function       Function       @relation(fields: [functionId], references: [id], onDelete: Cascade)

  @@unique([scheduleMemberId, functionId])
  @@map("schedule_member_functions")
}

// NOVO MODEL: Administradores de Grupos de Funções
model FunctionGroupAdmin {
  id              Int @id @default(autoincrement())
  userId          Int
  functionGroupId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  functionGroup FunctionGroup @relation(fields: [functionGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, functionGroupId])
  @@map("function_group_admins")
}